diff -Nur vdr-1.7.12-devel/remux.c vdr-1.7.12-ttxtsubs/remux.c
--- vdr-1.7.12-devel/remux.c	2010-01-30 11:43:12.000000000 +0100
+++ vdr-1.7.12-ttxtsubs/remux.c	2010-02-15 21:55:19.000000000 +0100
@@ -403,6 +432,7 @@
   pmtPid = -1;
   vpid = vtype = 0;
   ppid = 0;
+  tpid = 0;
 }
 
 void cPatPmtParser::ParsePat(const uchar *Data, int Length)
@@ -486,13 +516,16 @@
      int NumApids = 0;
      int NumDpids = 0;
      int NumSpids = 0;
+     int NumTpages = 0;
      vpid = vtype = 0;
      ppid = 0;
+     tpid = 0;
      apids[0] = 0;
      dpids[0] = 0;
      spids[0] = 0;
      atypes[0] = 0;
      dtypes[0] = 0;
+     tpages[0] = 0;
      SI::PMT::Stream stream;
      for (SI::Loop::Iterator it; Pmt.streamLoop.getNext(stream, it); ) {
          dbgpatpmt("     stream type = %02X, pid = %d", stream.getStreamType(), stream.getPid());
@@ -586,6 +619,26 @@
                                     spids[NumSpids]= 0;
                                     }
                                  break;
+                            case SI::TeletextDescriptorTag: {
+                                 dbgpatpmt(" teletext");
+                                 tpid = stream.getPid();
+                                 SI::TeletextDescriptor *sd = (SI::TeletextDescriptor *)d;
+                                 SI::TeletextDescriptor::Teletext ttxt;
+                                 for (SI::Loop::Iterator it; sd->teletextLoop.getNext(ttxt, it); )
+{
+                                     //if ((NumTpages < MAXTPAGES) && ttxt.languageCode[0] && ((ttxt.getTeletextType() == 0x02) || (ttxt.getTeletextType() == 0x05))) {
+                                     if ((NumTpages < MAXTPAGES) && ttxt.languageCode[0]) { // type is not set on german stations
+                                        char *s = tlangs[NumTpages];
+                                        strn0cpy(s, I18nNormalizeLanguageCode(ttxt.languageCode), MAXLANGCODE1);
+                                        tpages[NumTpages] = (ttxt.getTeletextPageNumber() & 0xff) | ((ttxt.getTeletextMagazineNumber() & 0xff) << 8) | ((ttxt.getTeletextType() & 0xff) << 16);
+                                        dsyslog ("pat: %2d: %02X %04X=%3d %3s", NumTpages, ttxt.getTeletextType(), tpages[NumTpages], tpages[NumTpages], s);
+                                        NumTpages++;
+                                        tpages[NumTpages]= 0;
+                                        }
+                                     }
+                                 }
+                                 break;
+
                             case SI::ISO639LanguageDescriptorTag: {
                                  SI::ISO639LanguageDescriptor *ld = (SI::ISO639LanguageDescriptor *)d;
                                  dbgpatpmt(" '%s'", ld->languageCode);
diff -Nur vdr-1.7.12-devel/remux.h vdr-1.7.12-ttxtsubs/remux.h
--- vdr-1.7.12-devel/remux.h	2010-01-29 17:51:26.000000000 +0100
+++ vdr-1.7.12-ttxtsubs/remux.h	2010-02-15 21:34:37.000000000 +0100
@@ -214,6 +215,7 @@
   int pmtPid;
   int vpid;
   int ppid;
+  int tpid;
   int vtype;
   int apids[MAXAPIDS + 1]; // list is zero-terminated
   int atypes[MAXAPIDS + 1]; // list is zero-terminated
@@ -223,6 +225,8 @@
   char dlangs[MAXDPIDS][MAXLANGCODE2];
   int spids[MAXSPIDS + 1]; // list is zero-terminated
   char slangs[MAXSPIDS][MAXLANGCODE2];
+  int tpages[MAXTPAGES + 1]; // list is zero-terminated
+  char tlangs[MAXTPAGES][MAXLANGCODE2];
   uchar subtitlingTypes[MAXSPIDS];
   uint16_t compositionPageIds[MAXSPIDS];
   uint16_t ancillaryPageIds[MAXSPIDS];
@@ -262,6 +266,7 @@
   const int *Apids(void) const { return apids; }
   const int *Dpids(void) const { return dpids; }
   const int *Spids(void) const { return spids; }
+  const int  Tpid(void)  const { return tpid;  }
   int Apid(int i) const { return (0 <= i && i < MAXAPIDS) ? apids[i] : 0; }
   int Dpid(int i) const { return (0 <= i && i < MAXDPIDS) ? dpids[i] : 0; }
   int Spid(int i) const { return (0 <= i && i < MAXSPIDS) ? spids[i] : 0; }
@@ -270,6 +275,8 @@
   const char *Alang(int i) const { return (0 <= i && i < MAXAPIDS) ? alangs[i] : ""; }
   const char *Dlang(int i) const { return (0 <= i && i < MAXDPIDS) ? dlangs[i] : ""; }
   const char *Slang(int i) const { return (0 <= i && i < MAXSPIDS) ? slangs[i] : ""; }
+  const char *Tlang(int i) const { return (0 <= i && i < MAXTPAGES) ? tlangs[i] : ""; }
+  int Tpages(int i) const { return (0 <= i && i < MAXTPAGES) ? tpages[i] : 0; }
   uchar SubtitlingType(int i) const { return (0 <= i && i < MAXSPIDS) ? subtitlingTypes[i] : uchar(0); }
   uint16_t CompositionPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? compositionPageIds[i] : uint16_t(0); }
   uint16_t AncillaryPageId(int i) const { return (0 <= i && i < MAXSPIDS) ? ancillaryPageIds[i] : uint16_t(0); }
